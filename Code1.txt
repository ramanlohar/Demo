#include <poppler/glib/poppler.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pdf_file>\n", argv[0]);
        return 1;
    }

    GError *error = NULL;
    PopplerDocument *document;
    PopplerPage *page;
    gchar *text;

    poppler_init(argc, argv);

    document = poppler_document_new_from_file(argv[1], NULL, &error);
    if (error != NULL) {
        fprintf(stderr, "Error opening PDF: %s\n", error->message);
        g_error_free(error);
        return 1;
    }

    for (int i = 0; i < poppler_document_get_n_pages(document); i++) {
        page = poppler_document_get_page(document, i);
        text = poppler_page_get_text(page);

        g_print("Page %d:\n%s\n", i + 1, text);

        g_free(text);
        g_object_unref(page);
    }

    g_object_unref(document);
    poppler_cleanup();

    return 0;
}


gcc -o pdf_reader pdf_reader.c $(pkg-config --cflags --libs poppler-glib)



./pdf_reader your_pdf_file.pdf


{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "type": "shell",
            "command": "gcc",
            "args": [
                "-o",
                "${fileDirname}/pdf_reader",
                "${file}",
                "$(pkg-config --cflags --libs poppler-glib)"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}



sudo apt-get install libpoppler-glib-dev



**************************************†*********†*******‡************

#include <stdio.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pdf_file>\n", argv[0]);
        return 1;
    }

    FILE *file = fopen(argv[1], "rb");
    if (!file) {
        fprintf(stderr, "Error opening PDF file: %s\n", argv[1]);
        return 1;
    }

    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    char *buffer = malloc(file_size + 1);
    if (!buffer) {
        fprintf(stderr, "Memory allocation error\n");
        fclose(file);
        return 1;
    }

    size_t read_size = fread(buffer, 1, file_size, file);
    buffer[read_size] = '\0';

    printf("PDF Content:\n%s\n", buffer);

    free(buffer);
    fclose(file);

    return 0;
}
